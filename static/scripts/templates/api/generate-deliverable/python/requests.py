import requests
import json
import uuid
from datetime import datetime

# Configuration - Update these values
API_TOKEN = "YOUR_API_TOKEN"
ORG_ID = "YOUR_ORGANIZATION_ID"
BASE_URL = "https://api.turbodocx.com"

class DeliverableGenerator:
    """Final Step: Generate Deliverable (Both Paths Converge Here)"""

    def __init__(self, api_token, org_id, base_url):
        self.api_token = api_token
        self.org_id = org_id
        self.base_url = base_url
        self.headers = {
            'Authorization': f'Bearer {api_token}',
            'x-rapiddocx-org-id': org_id,
            'User-Agent': 'TurboDocx API Client',
            'Content-Type': 'application/json'
        }

    def generate_deliverable(self, template_id, deliverable_data):
        """Generate a deliverable document from template with variable substitution"""
        try:
            url = f"{self.base_url}/deliverable"

            payload = {
                "templateId": template_id,
                "name": deliverable_data["name"],
                "description": deliverable_data.get("description", ""),
                "variables": deliverable_data["variables"],
                "tags": deliverable_data.get("tags", []),
                "fonts": deliverable_data.get("fonts", "[]"),
                "defaultFont": deliverable_data.get("defaultFont", "Arial"),
                "replaceFonts": deliverable_data.get("replaceFonts", True),
                "metadata": deliverable_data.get("metadata", {
                    "sessions": [{
                        "id": self.generate_session_id(),
                        "starttime": datetime.utcnow().isoformat() + "Z",
                        "endtime": datetime.utcnow().isoformat() + "Z"
                    }]
                })
            }

            print(f"Generating deliverable...")
            print(f"Template ID: {template_id}")
            print(f"Deliverable Name: {payload['name']}")
            print(f"Variables: {len(payload['variables'])}")

            response = requests.post(url, headers=self.headers, json=payload)
            response.raise_for_status()

            result = response.json()
            deliverable = result['data']['deliverable']

            print("âœ… Deliverable generated successfully!")
            print(f"Deliverable ID: {deliverable['id']}")
            print(f"Status: {deliverable['status']}")
            print(f"Download URL: {deliverable['downloadUrl']}")
            print(f"File Size: {deliverable['fileSize']} bytes")

            return deliverable

        except requests.exceptions.RequestException as e:
            print(f"Error generating deliverable: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"Response body: {e.response.text}")
            raise

    def create_complex_variables(self):
        """Example: Complex variable structure with all features"""
        return [
            {
                "mimeType": "text",
                "name": "Employee Name",
                "placeholder": "{EmployeeName}",
                "text": "John Smith",
                "allowRichTextInjection": 0,
                "autogenerated": False,
                "count": 1,
                "order": 1,
                "subvariables": [
                    {
                        "placeholder": "{EmployeeName.Title}",
                        "text": "Senior Software Engineer"
                    },
                    {
                        "placeholder": "{EmployeeName.StartDate}",
                        "text": "January 15, 2024"
                    }
                ],
                "metadata": {
                    "department": "Engineering",
                    "level": "Senior"
                },
                "aiPrompt": "Generate a professional job description for a senior software engineer role"
            },
            {
                "mimeType": "text",
                "name": "Company Information",
                "placeholder": "{CompanyInfo}",
                "text": "TechCorp Solutions Inc.",
                "allowRichTextInjection": 1,
                "autogenerated": False,
                "count": 1,
                "order": 2,
                "subvariables": [
                    {
                        "placeholder": "{CompanyInfo.Address}",
                        "text": "123 Innovation Drive, Tech City, TC 12345"
                    },
                    {
                        "placeholder": "{CompanyInfo.Phone}",
                        "text": "(555) 123-4567"
                    }
                ],
                "metadata": {},
                "aiPrompt": ""
            },
            {
                "mimeType": "text",
                "name": "Project Assignments",
                "placeholder": "{ProjectAssignments}",
                "text": "Multiple ongoing projects",
                "allowRichTextInjection": 0,
                "autogenerated": False,
                "count": 3,
                "order": 3,
                "subvariables": [],
                "variableStack": {
                    "0": {
                        "text": "Project Alpha - Backend Development",
                        "subvariables": [
                            {
                                "placeholder": "{ProjectAssignments.Duration}",
                                "text": "6 months"
                            },
                            {
                                "placeholder": "{ProjectAssignments.Priority}",
                                "text": "High"
                            }
                        ]
                    },
                    "1": {
                        "text": "Project Beta - API Integration",
                        "subvariables": [
                            {
                                "placeholder": "{ProjectAssignments.Duration}",
                                "text": "3 months"
                            },
                            {
                                "placeholder": "{ProjectAssignments.Priority}",
                                "text": "Medium"
                            }
                        ]
                    },
                    "2": {
                        "text": "Project Gamma - Code Review",
                        "subvariables": [
                            {
                                "placeholder": "{ProjectAssignments.Duration}",
                                "text": "Ongoing"
                            },
                            {
                                "placeholder": "{ProjectAssignments.Priority}",
                                "text": "Low"
                            }
                        ]
                    }
                },
                "metadata": {
                    "totalProjects": 3,
                    "estimatedHours": 1200
                },
                "aiPrompt": "Create detailed project descriptions for software development initiatives"
            },
            {
                "mimeType": "text",
                "name": "Benefits Package",
                "placeholder": "{BenefitsPackage}",
                "text": "Comprehensive benefits including health, dental, vision, and 401k",
                "allowRichTextInjection": 1,
                "autogenerated": False,
                "count": 1,
                "order": 4,
                "subvariables": [
                    {
                        "placeholder": "{BenefitsPackage.HealthInsurance}",
                        "text": "Full coverage health insurance with $500 deductible"
                    },
                    {
                        "placeholder": "{BenefitsPackage.PTO}",
                        "text": "25 days paid time off annually"
                    },
                    {
                        "placeholder": "{BenefitsPackage.Retirement}",
                        "text": "401k with 6% company match"
                    }
                ],
                "metadata": {
                    "packageValue": "$15,000 annually",
                    "effective": "First day of employment"
                },
                "aiPrompt": "Outline a competitive benefits package for a senior software engineer"
            }
        ]

    def generate_session_id(self):
        """Generate a session ID for metadata tracking"""
        return str(uuid.uuid4())

def example_generate_deliverable():
    """Example usage with realistic data"""
    try:
        generator = DeliverableGenerator(API_TOKEN, ORG_ID, BASE_URL)

        # This would come from either Path A (upload) or Path B (browse/select)
        template_id = "0b1099cf-d7b9-41a4-822b-51b68fd4885a"

        deliverable_data = {
            "name": "Employee Contract - John Smith",
            "description": "Employment contract for new senior software engineer",
            "variables": generator.create_complex_variables(),
            "tags": ["hr", "contract", "employee", "engineering"],
            "fonts": '[{"name":"Arial","usage":269}]',
            "defaultFont": "Arial",
            "replaceFonts": True,
            "metadata": {
                "sessions": [
                    {
                        "id": "cf1cd4b9-6fdc-47e3-b59d-594cd6564501",
                        "starttime": "2024-01-15T14:12:10.721Z",
                        "endtime": "2024-01-15T14:13:45.724Z"
                    }
                ],
                "createdBy": "HR Department",
                "documentType": "Employment Contract",
                "version": "v1.0"
            }
        }

        print("=== Final Step: Generate Deliverable ===")
        deliverable = generator.generate_deliverable(template_id, deliverable_data)

        return deliverable

    except Exception as error:
        print(f"Deliverable generation failed: {error}")

# Example usage
if __name__ == "__main__":
    example_generate_deliverable()